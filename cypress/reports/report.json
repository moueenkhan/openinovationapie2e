{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 13,
    "pending": 0,
    "failures": 1,
    "start": "2024-07-27T12:34:19.957Z",
    "end": "2024-07-27T12:34:56.185Z",
    "duration": 36228,
    "testsRegistered": 14,
    "passPercent": 92.85714285714286,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "05a75232-b4a9-4ce8-b12e-320798ac1791",
      "title": "",
      "fullFile": "cypress/e2e/modelManagement.cy.js",
      "file": "cypress/modelManagement.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8ec55327-e5b2-4e03-b427-0c113aea2d40",
          "title": "Model Management API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully create a new model",
              "fullTitle": "Model Management API should successfully create a new model",
              "timedOut": null,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  name,\n  owner\n};\npostRequest(`${baseUrl}/models`, body, 200, true).then(response => {\n  modelId = response.body.id;\n});",
              "err": {},
              "uuid": "5016046c-930b-4134-847e-a9d0672c33cd",
              "parentUUID": "8ec55327-e5b2-4e03-b427-0c113aea2d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error when adding a model with a missing \"name\" field",
              "fullTitle": "Model Management API should return an error when adding a model with a missing \"name\" field",
              "timedOut": null,
              "duration": 93,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const body = {\n  owner\n};\npostRequest(`${baseUrl}/models`, body, 400, true); // Assuming 400 is the expected status for this error",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttp://host.docker.internal:8000/models\n\nThe response we received from your web server was:\n\n  > 422: Unprocessable Entity\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: http://host.docker.internal:8000/models\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (X11; Linux aarch64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/13.13.1 Chrome/118.0.5993.159 Electron/27.3.10 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 39\n}\nBody: {\"owner\":\"Eduardo Howell-Christiansen\"}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 422 - Unprocessable Entity\nHeaders: {\n  \"date\": \"Sat, 27 Jul 2024 12:34:19 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"124\",\n  \"content-type\": \"application/json\"\n}\nBody: {\n  \"detail\": [\n    {\n      \"type\": \"missing\",\n      \"loc\": [\n        \"body\",\n        \"name\"\n      ],\n      \"msg\": \"Field required\",\n      \"input\": {\n        \"owner\": \"Eduardo Howell-Christiansen\"\n      }\n    }\n  ]\n}\n\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttp://host.docker.internal:8000/models\n\nThe response we received from your web server was:\n\n  > 422: Unprocessable Entity\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: http://host.docker.internal:8000/models\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (X11; Linux aarch64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/13.13.1 Chrome/118.0.5993.159 Electron/27.3.10 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 39\n}\nBody: {\"owner\":\"Eduardo Howell-Christiansen\"}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 422 - Unprocessable Entity\nHeaders: {\n  \"date\": \"Sat, 27 Jul 2024 12:34:19 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"124\",\n  \"content-type\": \"application/json\"\n}\nBody: {\n  \"detail\": [\n    {\n      \"type\": \"missing\",\n      \"loc\": [\n        \"body\",\n        \"name\"\n      ],\n      \"msg\": \"Field required\",\n      \"input\": {\n        \"owner\": \"Eduardo Howell-Christiansen\"\n      }\n    }\n  ]\n}\n\n\nhttps://on.cypress.io/request\n    at <unknown> (http://host.docker.internal:8000/__cypress/runner/cypress_runner.js:133185:72)\n    at tryCatcher (http://host.docker.internal:8000/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise._settlePromiseFromHandler (http://host.docker.internal:8000/__cypress/runner/cypress_runner.js:1519:31)\n    at Promise._settlePromise (http://host.docker.internal:8000/__cypress/runner/cypress_runner.js:1576:18)\n    at Promise._settlePromise0 (http://host.docker.internal:8000/__cypress/runner/cypress_runner.js:1621:10)\n    at Promise._settlePromises (http://host.docker.internal:8000/__cypress/runner/cypress_runner.js:1701:18)\n    at _drainQueueStep (http://host.docker.internal:8000/__cypress/runner/cypress_runner.js:2407:12)\n    at _drainQueue (http://host.docker.internal:8000/__cypress/runner/cypress_runner.js:2400:9)\n    at Async._drainQueues (http://host.docker.internal:8000/__cypress/runner/cypress_runner.js:2416:5)\n    at Async.drainQueues (http://host.docker.internal:8000/__cypress/runner/cypress_runner.js:2286:14)\nFrom Your Spec Code:\n    at postRequest (webpack:///./cypress/requests/apiRequests.js:3:5)\n    at Context.eval (webpack:///./cypress/e2e/modelManagement.cy.js:27:4)",
                "diff": null
              },
              "uuid": "c58b0115-f1fc-4126-b5a6-db8f66353fc1",
              "parentUUID": "8ec55327-e5b2-4e03-b427-0c113aea2d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve the list of models",
              "fullTitle": "Model Management API should retrieve the list of models",
              "timedOut": null,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getRequest(`${baseUrl}/models`).then(response => {\n  const foundItem = response.body.find(item => item.id === modelId);\n  expect(foundItem).to.not.be.undefined;\n  expect(foundItem).to.include({\n    id: modelId,\n    name,\n    owner\n  });\n});",
              "err": {},
              "uuid": "b42b028c-304d-41b1-959d-7f8acd4d3940",
              "parentUUID": "8ec55327-e5b2-4e03-b427-0c113aea2d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should successfully add a new version to a model",
              "fullTitle": "Model Management API should successfully add a new version to a model",
              "timedOut": null,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  name: versionName,\n  hugging_face_model: huggingFaceModel\n};\npostRequest(`${baseUrl}/models/${modelId}/versions`, body, 200, true).then(response => {\n  versionId = response.body.id;\n});",
              "err": {},
              "uuid": "f892b082-5768-48ef-a843-041e29dcd7fc",
              "parentUUID": "8ec55327-e5b2-4e03-b427-0c113aea2d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve the version details for a model",
              "fullTitle": "Model Management API should retrieve the version details for a model",
              "timedOut": null,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getRequest(`${baseUrl}/models/${modelId}/versions/`);",
              "err": {},
              "uuid": "aa45e62e-2e67-449a-b443-cf5eaa9f3b43",
              "parentUUID": "8ec55327-e5b2-4e03-b427-0c113aea2d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should perform inference on a specific model version",
              "fullTitle": "Model Management API should perform inference on a specific model version",
              "timedOut": null,
              "duration": 35769,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  text: \"text48\",\n  apply_template: false,\n  max_new_tokens: 256,\n  do_sample: true,\n  temperature: 0.7,\n  top_k: 50,\n  top_p: 0.95\n};\ncy.request({\n  method: \"POST\",\n  url: `${baseUrl}/models/${modelId}/versions/${versionId}/infer`,\n  body,\n  timeout: 900000\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.include(\"text48\");\n});",
              "err": {},
              "uuid": "69d8df98-d389-4fb3-b1e3-63ea3ad6d520",
              "parentUUID": "8ec55327-e5b2-4e03-b427-0c113aea2d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should successfully delete a version of a model",
              "fullTitle": "Model Management API should successfully delete a version of a model",
              "timedOut": null,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "deleteRequest(`${baseUrl}/models/${modelId}/versions/${versionId}`);",
              "err": {},
              "uuid": "81a49d93-8aaf-4c2e-939f-ad28f1ab1459",
              "parentUUID": "8ec55327-e5b2-4e03-b427-0c113aea2d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should successfully delete the created model",
              "fullTitle": "Model Management API should successfully delete the created model",
              "timedOut": null,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "deleteRequest(`${baseUrl}/models/${modelId}`);",
              "err": {},
              "uuid": "0256c4fa-6d35-43b5-ab57-b995549e5efa",
              "parentUUID": "8ec55327-e5b2-4e03-b427-0c113aea2d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw 404 for deleting an already deleted model",
              "fullTitle": "Model Management API should throw 404 for deleting an already deleted model",
              "timedOut": null,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "deleteRequest(`${baseUrl}/models/${modelId}`, 404);",
              "err": {},
              "uuid": "c09b08f2-9d3c-41a7-9ce1-ce1e289bc18b",
              "parentUUID": "8ec55327-e5b2-4e03-b427-0c113aea2d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error when deleting a non-existent model",
              "fullTitle": "Model Management API should return an error when deleting a non-existent model",
              "timedOut": null,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "deleteRequest(`${baseUrl}/models/invalidModelId`, 404);",
              "err": {},
              "uuid": "186b9e2c-537b-46f3-a864-5a85258fb67d",
              "parentUUID": "8ec55327-e5b2-4e03-b427-0c113aea2d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error for adding a model with an invalid owner",
              "fullTitle": "Model Management API should return an error for adding a model with an invalid owner",
              "timedOut": null,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  name,\n  owner: 12345\n};\npostRequest(`${baseUrl}/models`, body, 422, false);",
              "err": {},
              "uuid": "c14be3ef-459d-4cf9-ba43-77038be49c00",
              "parentUUID": "8ec55327-e5b2-4e03-b427-0c113aea2d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error when adding a version to a non-existent model",
              "fullTitle": "Model Management API should return an error when adding a version to a non-existent model",
              "timedOut": null,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  name: versionName,\n  hugging_face_model: huggingFaceModel\n};\npostRequest(`${baseUrl}/models/24324/versions`, body, 404, false);",
              "err": {},
              "uuid": "8e6493fa-e506-42d1-ad7d-950b6a19668f",
              "parentUUID": "8ec55327-e5b2-4e03-b427-0c113aea2d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the model schema",
              "fullTitle": "Model Management API should validate the model schema",
              "timedOut": null,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n  name,\n  owner\n};\npostRequest(`${baseUrl}/models`, body).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.all.keys(\"id\", \"name\", \"owner\");\n});",
              "err": {},
              "uuid": "15c25ffa-d71f-4992-9a8e-d493dbc57f70",
              "parentUUID": "8ec55327-e5b2-4e03-b427-0c113aea2d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for an invalid model and version id for inference request",
              "fullTitle": "Model Management API should return 404 for an invalid model and version id for inference request",
              "timedOut": null,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidBody = {\n  text: \"any\",\n  apply_template: \"yes\"\n};\ncy.request({\n  method: \"POST\",\n  url: `${baseUrl}/models/wr234234/versions/234weadf/infer`,\n  body: invalidBody,\n  timeout: 900000,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "951c03a8-fe9b-4662-b279-d87c38b1934c",
              "parentUUID": "8ec55327-e5b2-4e03-b427-0c113aea2d40",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5016046c-930b-4134-847e-a9d0672c33cd",
            "b42b028c-304d-41b1-959d-7f8acd4d3940",
            "f892b082-5768-48ef-a843-041e29dcd7fc",
            "aa45e62e-2e67-449a-b443-cf5eaa9f3b43",
            "69d8df98-d389-4fb3-b1e3-63ea3ad6d520",
            "81a49d93-8aaf-4c2e-939f-ad28f1ab1459",
            "0256c4fa-6d35-43b5-ab57-b995549e5efa",
            "c09b08f2-9d3c-41a7-9ce1-ce1e289bc18b",
            "186b9e2c-537b-46f3-a864-5a85258fb67d",
            "c14be3ef-459d-4cf9-ba43-77038be49c00",
            "8e6493fa-e506-42d1-ad7d-950b6a19668f",
            "15c25ffa-d71f-4992-9a8e-d493dbc57f70",
            "951c03a8-fe9b-4662-b279-d87c38b1934c"
          ],
          "failures": [
            "c58b0115-f1fc-4126-b5a6-db8f66353fc1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 36052,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "reportFilename": "report",
        "quiet": true,
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}